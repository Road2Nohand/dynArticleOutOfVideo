name: Terraform Continuous Integration & Deployment

on:
  push:
    branches:
      - main

jobs:
  terraform_ci:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Den Workspace Wechsel, sollte man später branch-abhängig machen DEV -> develop und PROD -> main
      - name: Terraform Init
        run: |
          ls -al
          terraform init -backend-config="bucket=terraform-state-sportsvideo-to-article" -backend-config="region=eu-central-1" -backend-config="key=terraform-state"
          terraform workspace select DEV

      - name: Terraform Validate
        run: |
          ls -al
          terraform validate

      # Hier später noch einen Plan einfügen, sodass der Apply halb-automatisch ausgeführt werden muss wenn auf den "main" strang gepushed wird, ansonsten bei "develop" voll-automatisiert.
      
      #- name: Terraform Plan
      #  run: |
      #    ls -al
      #    timestamp=$(date +"%Y%m%d%H%M%S")
      #    terraform plan -out=tfplan-${timestamp}

      #- name: Upload Terraform Plan
      #  run: |
      #    ls -al
      #    git add tfplan-*
      #    git commit -m "Terraform Plan for $(date +"%Y%m%d%H%M%S")"
      #    git push

      # Damit durch Pushes keine Differenz entsteht zwischen plan und apply, sollte im apply die tfplan-* verwendet werden
      

      # || true bewirkt ein continue on error -> workaround für die s3 policy
      - name: Terraform Apply 1st
        run: |
          ls -al
          terraform apply -auto-approve || true

      - name: Terraform Apply 2nd
        run: |
          ls -al
          terraform apply -auto-approve

      - name: Terraform Apply 3rd
        run: |
          ls -al
          terraform apply -auto-approve

      # Der Bucket-Name muss später auch Workspace, also Branch abhängig gesetzt
      - name: Upload HTML to S3
        run: |
          ls -al
          aws s3 cp ../index.html s3://dyn-bucket-for-static-article-website-dev/


# später noch einen parallelen Job anlegen, für Info-Email das ein Deployment gestartet wurde